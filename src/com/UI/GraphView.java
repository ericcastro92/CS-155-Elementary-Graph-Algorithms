/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.UI;

import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxStylesheet;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author ericcastro
 */
public class GraphView extends javax.swing.JFrame 
{   
    private mxGraph graph;
    private Object parent;
    
    /**
     * Creates new form GraphView
     */
    public GraphView(MainView mv) 
    {
        initComponents();
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                mv.enableButtons();
            }
        });
        
        graph = new mxGraph();
        buildStyles();
        initializeGraph();

        TimerTask tt = new TimerTask() 
        {
            @Override
            public void run() 
            {
                System.out.println("Resuming");
                traverseGraph();
            }
        };
        
        System.out.println("Waiting");
        Timer timer = new Timer();
        timer.schedule(tt, 5000);//Wait for 5 seconds
        
        
        mxGraphComponent graphComponent = new mxGraphComponent(graph);
        graphScrollPane.add(graphComponent);
        graphScrollPane.setViewportView(graphComponent);
    }
    
    private void buildStyles()
    {
        mxStylesheet stylesheet = graph.getStylesheet();
        HashMap<String, Object> style = new HashMap<>();
        
        //Default rounded style
        style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        stylesheet.putCellStyle("ROUNDED", style);
        
        //Red rounded style
        style = new HashMap<>();
        style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        style.put(mxConstants.STYLE_FILLCOLOR, "#FF0000");
        style.put(mxConstants.STYLE_STROKECOLOR, "#000000");
        stylesheet.putCellStyle("RED_ROUNDED", style);
        
        //Overlay edge
        style = new HashMap<>();
        style.put(mxConstants.STYLE_STROKECOLOR, "#000000");
        stylesheet.putCellStyle("OVERLAY_EDGE", style);
    }

    private void initializeGraph()
    {
        parent = graph.getDefaultParent();

        graph.getModel().beginUpdate();
        try
        {
            Object v1 = graph.insertVertex(parent, null, "A", 20, 20, 80, 30, "ROUNDED");
            Object v2 = graph.insertVertex(parent, null, "B", 240, 150, 80, 30, "ROUNDED");
            graph.insertEdge(parent, null, null, v1, v2);
        }
        finally
        {
            graph.getModel().endUpdate();
        }
    }
    
    private void traverseGraph()
    {
        graph.getModel().beginUpdate();
        try
        {
            Object v3 = graph.insertVertex(parent, null, "C", 20, 20, 80, 30, "RED_ROUNDED");
            Object v4 = graph.insertVertex(parent, null, "D", 240, 150, 80, 30, "RED_ROUNDED");
            graph.insertEdge(parent, null, null, v3, v4,"OVERLAY_EDGE");
        }
        finally
        {
            graph.getModel().endUpdate();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphScrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graph");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane graphScrollPane;
    // End of variables declaration//GEN-END:variables
}
